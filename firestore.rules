rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection - users can read/write their own profile, admins can read all
    match /users/{userId} {
      // Users can always read and write their own profile
      allow read, write: if isOwner(userId);
      // Admins can read all user profiles
      allow read: if isAdmin();
      // Admins can update other users (for admin status management)
      allow update: if isAdmin();
    }

    // Items collection - restricted write access, public read for live items
    match /items/{itemId} {
      // Public read access for live items
      allow read: if resource.data.status == 'live' || 
                     isAdmin() || 
                     (isAuthenticated() && resource.data.sellerId == request.auth.uid);
      
      // Users can create items (pending approval) or admins can create test data
      allow create: if (isAuthenticated() && 
                        request.resource.data.sellerId == request.auth.uid &&
                        request.resource.data.status == 'pending') ||
                       (isAdmin() && request.resource.data.isTestData == true);
      
      // Users can update their own items (but not change status to sold - server only)
      allow update: if isAuthenticated() && 
                       resource.data.sellerId == request.auth.uid &&
                       request.resource.data.status != 'sold' &&
                       request.resource.data.sellerId == resource.data.sellerId;
      
      // Admins can update item status (but only through server for sold items)
      allow update: if isAdmin() && 
                       (request.resource.data.status != 'sold' || 
                        request.resource.data.status == resource.data.status);
      
      // Allow admins to delete test data only
      allow delete: if isAdmin() && resource.data.isTestData == true;
    }

    // Sales collection - SERVER ONLY ACCESS
    // This prevents clients from directly creating fake sales records
    match /sales/{saleId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && 
                      (resource.data.sellerId == request.auth.uid || 
                       resource.data.buyerId == request.auth.uid));
      
      // NO direct write access - only server can create sales records
      allow write: if false;
    }

    // Orders collection - SERVER ONLY ACCESS
    // This prevents clients from creating fake orders
    match /orders/{orderId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // NO direct write access - only server can create orders
      allow write: if false;
    }

    // Store credits collection - SERVER ONLY ACCESS
    // This prevents clients from giving themselves free credits
    match /store_credits/{creditId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // NO direct write access - only server can create store credits
      allow write: if false;
    }

    // Store credit transactions - SERVER ONLY ACCESS
    match /store_credit_transactions/{transactionId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // NO direct write access - only server can create transactions
      allow write: if false;
    }

    // Payments collection - ADMIN ONLY
    match /payments/{paymentId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // User actions (logs) - read-only for users, full access for admins
    match /user_actions/{actionId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // Action logs collection - admin read access, authenticated users can create logs  
    match /actionLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Test collection - for development only
    match /test/{testId} {
      allow read, write: if isAuthenticated();
    }

    // Performance metrics - admin only
    match /performance_metrics/{metricId} {
      allow read, write: if isAdmin();
    }

    // Refunds collection - admin only
    match /refunds/{refundId} {
      allow read, write: if isAdmin();
    }

    // Application performance data - admin only  
    match /application_performance/{perfId} {
      allow read, write: if isAdmin();
    }

    // Security test results - admin only
    match /security_tests/{testId} {
      allow read, write: if isAdmin();
    }

    // Test performance runs - admin only
    match /test_performance_runs/{runId} {
      allow read, write: if isAdmin();
    }

    // Test results and analytics - admin only
    match /test_results/{resultId} {
      allow read, write: if isAdmin();
    }

    // Feature test data - admin only
    match /feature_tests/{testId} {
      allow read, write: if isAdmin();
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 