import React, { useState, useEffect } from 'react';
import { collection, addDoc, getDocs, query, where, orderBy, limit, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../config/firebase';
import { useAuth } from '../hooks/useAuth';
import { logUserAction } from '../services/firebaseService';

interface AdminBanModalProps {
  onClose: () => void;
}

interface BannedIP {
  id: string;
  ip: string;
  reason: string;
  bannedAt: Date;
  expiresAt: Date;
  active: boolean;
  autoGenerated?: boolean;
}

interface BannedUser {
  id: string;
  userId: string;
  email: string;
  reason: string;
  bannedAt: Date;
  expiresAt: Date;
  active: boolean;
  autoGenerated?: boolean;
}

interface RateLimitViolation {
  id: string;
  action: string;
  userId?: string;
  ip: string;
  attempts: number;
  maxAttempts: number;
  timestamp: Date;
  userAgent: string;
  url: string;
}

interface UserRecord {
  id: string;
  email: string;
  displayName: string;
  photoURL?: string;
  isAdmin: boolean;
  createdAt: Date;
  lastLoginAt?: Date;
  ipAddress?: string;
  isBanned?: boolean;
}

const AdminBanModal: React.FC<AdminBanModalProps> = ({ onClose }) => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState<'bans' | 'violations' | 'users' | 'manual'>('bans');
  const [bannedIPs, setBannedIPs] = useState<BannedIP[]>([]);
  const [bannedUsers, setBannedUsers] = useState<BannedUser[]>([]);
  const [violations, setViolations] = useState<RateLimitViolation[]>([]);
  const [users, setUsers] = useState<UserRecord[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredUsers, setFilteredUsers] = useState<UserRecord[]>([]);

  // Manual ban form state
  const [manualBanForm, setManualBanForm] = useState({
    type: 'ip' as 'ip' | 'user',
    target: '',
    reason: '',
    duration: '24' // hours
  });

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    filterUsers();
  }, [users, searchQuery]);

  const loadData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadBannedIPs(),
        loadBannedUsers(),
        loadViolations(),
        loadUsers()
      ]);
    } catch (error) {
      console.error('Error loading ban data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadUsers = async () => {
    try {
      const usersRef = collection(db, 'users');
      const q = query(usersRef, orderBy('createdAt', 'desc'));
      const snapshot = await getDocs(q);
      
      const userList: UserRecord[] = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          email: data.email,
          displayName: data.displayName || data.email?.split('@')[0] || 'Unknown User',
          photoURL: data.photoURL,
          isAdmin: data.isAdmin === true,
          createdAt: data.createdAt?.toDate() || new Date(),
          lastLoginAt: data.lastLoginAt?.toDate(),
          ipAddress: data.lastKnownIP || 'Unknown',
          isBanned: false // Will be updated when we check banned users
        };
      });

      // Check which users are banned
      const bannedUserIds = new Set(bannedUsers.filter(bu => bu.active).map(bu => bu.userId));
      const bannedEmails = new Set(bannedUsers.filter(bu => bu.active).map(bu => bu.email));
      
      const updatedUserList = userList.map(u => ({
        ...u,
        isBanned: bannedUserIds.has(u.id) || bannedEmails.has(u.email)
      }));

      setUsers(updatedUserList);
    } catch (error) {
      console.error('Error loading users:', error);
    }
  };

  const filterUsers = () => {
    if (!searchQuery.trim()) {
      setFilteredUsers(users);
      return;
    }

    const searchLower = searchQuery.toLowerCase();
    const filtered = users.filter(user => 
      user.email.toLowerCase().includes(searchLower) ||
      user.displayName.toLowerCase().includes(searchLower) ||
      (user.ipAddress && user.ipAddress.toLowerCase().includes(searchLower))
    );
    setFilteredUsers(filtered);
  };

  const handleBanUser = async (targetUser: UserRecord) => {
    if (targetUser.id === user?.uid) {
      alert("You cannot ban yourself");
      return;
    }

    if (targetUser.isAdmin) {
      const confirmBanAdmin = confirm(`WARNING: You are about to ban an admin user (${targetUser.displayName}). This action should only be taken in extreme circumstances. Are you sure?`);
      if (!confirmBanAdmin) return;
    }

    const reason = prompt(`Enter reason for banning ${targetUser.displayName} (${targetUser.email}):`);
    if (!reason) return;

    const durationInput = prompt('Enter ban duration in hours (default: 24):', '24');
    const duration = parseInt(durationInput || '24');
    
    if (isNaN(duration) || duration <= 0) {
      alert('Invalid duration');
      return;
    }

    try {
      const durationMs = duration * 60 * 60 * 1000;
      const expiresAt = new Date(Date.now() + durationMs);

      // Ban user by email
      await addDoc(collection(db, 'banned_users'), {
        userId: targetUser.id,
        email: targetUser.email,
        reason: reason,
        bannedAt: new Date(),
        expiresAt,
        active: true,
        autoGenerated: false,
        bannedBy: user?.uid
      });

      // Also ban their IP if available
      if (targetUser.ipAddress && targetUser.ipAddress !== 'Unknown') {
        await addDoc(collection(db, 'banned_ips'), {
          ip: targetUser.ipAddress,
          reason: `User ban: ${reason}`,
          bannedAt: new Date(),
          expiresAt,
          active: true,
          autoGenerated: false,
          bannedBy: user?.uid,
          associatedUser: targetUser.email
        });
      }

      await logUserAction(user, 'admin_action', `Banned user ${targetUser.displayName} (${targetUser.email}) for ${duration} hours. Reason: ${reason}`);
      
      alert(`User ${targetUser.displayName} has been banned successfully`);
      await loadData(); // Reload all data
    } catch (error) {
      console.error('Error banning user:', error);
      alert('Failed to ban user');
    }
  };

  const loadBannedIPs = async () => {
    try {
      const q = query(
        collection(db, 'banned_ips'),
        orderBy('bannedAt', 'desc'),
        limit(100)
      );
      const snapshot = await getDocs(q);
      const ips = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        bannedAt: doc.data().bannedAt?.toDate() || new Date(),
        expiresAt: doc.data().expiresAt?.toDate() || new Date()
      })) as BannedIP[];
      setBannedIPs(ips);
    } catch (error) {
      console.error('Error loading banned IPs:', error);
    }
  };

  const loadBannedUsers = async () => {
    try {
      const q = query(
        collection(db, 'banned_users'),
        orderBy('bannedAt', 'desc'),
        limit(100)
      );
      const snapshot = await getDocs(q);
      const users = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        bannedAt: doc.data().bannedAt?.toDate() || new Date(),
        expiresAt: doc.data().expiresAt?.toDate() || new Date()
      })) as BannedUser[];
      setBannedUsers(users);
    } catch (error) {
      console.error('Error loading banned users:', error);
    }
  };

  const loadViolations = async () => {
    try {
      const q = query(
        collection(db, 'rate_limit_violations'),
        orderBy('timestamp', 'desc'),
        limit(200)
      );
      const snapshot = await getDocs(q);
      const viols = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        timestamp: doc.data().timestamp?.toDate() || new Date()
      })) as RateLimitViolation[];
      setViolations(viols);
    } catch (error) {
      console.error('Error loading violations:', error);
    }
  };

  const handleUnbanIP = async (banId: string, ip: string) => {
    try {
      await updateDoc(doc(db, 'banned_ips', banId), {
        active: false,
        unbannedAt: new Date(),
        unbannedBy: user?.uid
      });

      await logUserAction(user, 'admin_action', `Unbanned IP: ${ip}`);
      await loadBannedIPs();
    } catch (error) {
      console.error('Error unbanning IP:', error);
      alert('Failed to unban IP');
    }
  };

  const handleUnbanUser = async (banId: string, email: string) => {
    try {
      await updateDoc(doc(db, 'banned_users', banId), {
        active: false,
        unbannedAt: new Date(),
        unbannedBy: user?.uid
      });

      await logUserAction(user, 'admin_action', `Unbanned user: ${email}`);
      await loadBannedUsers();
    } catch (error) {
      console.error('Error unbanning user:', error);
      alert('Failed to unban user');
    }
  };

  const handleManualBan = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!manualBanForm.target || !manualBanForm.reason) {
      alert('Please fill in all fields');
      return;
    }

    try {
      const durationMs = parseInt(manualBanForm.duration) * 60 * 60 * 1000; // Convert hours to ms
      const expiresAt = new Date(Date.now() + durationMs);

      if (manualBanForm.type === 'ip') {
        // Validate IP format
        const ipRegex = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
        if (!ipRegex.test(manualBanForm.target)) {
          alert('Please enter a valid IP address');
          return;
        }

        await addDoc(collection(db, 'banned_ips'), {
          ip: manualBanForm.target,
          reason: manualBanForm.reason,
          bannedAt: new Date(),
          expiresAt,
          active: true,
          autoGenerated: false,
          bannedBy: user?.uid
        });

        await logUserAction(user, 'admin_action', `Manually banned IP: ${manualBanForm.target} for ${manualBanForm.duration} hours`);
      } else {
        // Validate email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(manualBanForm.target)) {
          alert('Please enter a valid email address');
          return;
        }

        await addDoc(collection(db, 'banned_users'), {
          email: manualBanForm.target,
          reason: manualBanForm.reason,
          bannedAt: new Date(),
          expiresAt,
          active: true,
          autoGenerated: false,
          bannedBy: user?.uid
        });

        await logUserAction(user, 'admin_action', `Manually banned user: ${manualBanForm.target} for ${manualBanForm.duration} hours`);
      }

      // Reset form
      setManualBanForm({
        type: 'ip',
        target: '',
        reason: '',
        duration: '24'
      });

      // Reload data
      await loadData();
      alert('Ban applied successfully');
    } catch (error) {
      console.error('Error applying manual ban:', error);
      alert('Failed to apply ban');
    }
  };

  const handleBanFromViolation = async (violation: RateLimitViolation) => {
    try {
      const durationMs = 24 * 60 * 60 * 1000; // 24 hours
      const expiresAt = new Date(Date.now() + durationMs);

      // Ban IP
      await addDoc(collection(db, 'banned_ips'), {
        ip: violation.ip,
        reason: `Rate limit violation: ${violation.attempts} ${violation.action} attempts`,
        bannedAt: new Date(),
        expiresAt,
        active: true,
        autoGenerated: false,
        bannedBy: user?.uid,
        fromViolation: violation.id
      });

      // Ban user if available
      if (violation.userId) {
        await addDoc(collection(db, 'banned_users'), {
          userId: violation.userId,
          reason: `Rate limit violation: ${violation.attempts} ${violation.action} attempts`,
          bannedAt: new Date(),
          expiresAt,
          active: true,
          autoGenerated: false,
          bannedBy: user?.uid,
          fromViolation: violation.id
        });
      }

      await logUserAction(user, 'admin_action', `Banned IP ${violation.ip} and user ${violation.userId} from violation`);
      await loadData();
      alert('Ban applied successfully');
    } catch (error) {
      console.error('Error banning from violation:', error);
      alert('Failed to apply ban');
    }
  };

  const formatDate = (date: Date) => {
    return date.toLocaleString();
  };

  const formatDuration = (date: Date) => {
    const now = new Date();
    const diff = date.getTime() - now.getTime();
    if (diff <= 0) return 'Expired';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 0) {
      return `${hours}h ${minutes}m remaining`;
    } else {
      return `${minutes}m remaining`;
    }
  };

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl p-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto"></div>
          <p className="text-center mt-4">Loading ban management data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-hidden">
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-start">
            <div>
              <h2 className="text-2xl font-bold text-red-600">🚫 Ban Management</h2>
              <p className="text-gray-600 mt-1">Manage IP bans, user bans, and rate limit violations</p>
            </div>
            <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8 px-6">
            <button
              onClick={() => setActiveTab('bans')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'bans'
                  ? 'border-red-500 text-red-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Active Bans ({bannedIPs.filter(ip => ip.active).length + bannedUsers.filter(u => u.active).length})
            </button>
            <button
              onClick={() => setActiveTab('violations')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'violations'
                  ? 'border-red-500 text-red-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Violations ({violations.length})
            </button>
            <button
              onClick={() => setActiveTab('users')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'users'
                  ? 'border-red-500 text-red-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Users ({users.length})
            </button>
            <button
              onClick={() => setActiveTab('manual')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'manual'
                  ? 'border-red-500 text-red-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Manual Ban
            </button>
          </nav>
        </div>

        <div className="p-6 overflow-y-auto max-h-[calc(90vh-200px)]">
          {activeTab === 'bans' && (
            <div className="space-y-6">
              {/* Banned IPs */}
              <div>
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Banned IP Addresses</h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Reason</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Banned At</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {bannedIPs.filter(ip => ip.active).map((bannedIP) => (
                        <tr key={bannedIP.id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                            {bannedIP.ip}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900">
                            {bannedIP.reason}
                            {bannedIP.autoGenerated && (
                              <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                Auto
                              </span>
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {formatDate(bannedIP.bannedAt)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm">
                            {new Date() > bannedIP.expiresAt ? (
                              <span className="text-green-600">Expired</span>
                            ) : (
                              <span className="text-red-600">{formatDuration(bannedIP.expiresAt)}</span>
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => handleUnbanIP(bannedIP.id, bannedIP.ip)}
                              className="text-green-600 hover:text-green-900"
                            >
                              Unban
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>

              {/* Banned Users */}
              <div>
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Banned Users</h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Reason</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Banned At</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {bannedUsers.filter(user => user.active).map((bannedUser) => (
                        <tr key={bannedUser.id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {bannedUser.email || bannedUser.userId}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900">
                            {bannedUser.reason}
                            {bannedUser.autoGenerated && (
                              <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                Auto
                              </span>
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {formatDate(bannedUser.bannedAt)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm">
                            {new Date() > bannedUser.expiresAt ? (
                              <span className="text-green-600">Expired</span>
                            ) : (
                              <span className="text-red-600">{formatDuration(bannedUser.expiresAt)}</span>
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => handleUnbanUser(bannedUser.id, bannedUser.email)}
                              className="text-green-600 hover:text-green-900"
                            >
                              Unban
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'violations' && (
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-4">Rate Limit Violations</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attempts</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {violations.map((violation) => (
                      <tr key={violation.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {violation.action}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                          {violation.ip}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {violation.userId || 'Anonymous'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          <span className="text-red-600 font-medium">{violation.attempts}</span>
                          <span className="text-gray-500">/{violation.maxAttempts}</span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {formatDate(violation.timestamp)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button
                            onClick={() => handleBanFromViolation(violation)}
                            className="text-red-600 hover:text-red-900"
                          >
                            Ban
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

                     {activeTab === 'users' && (
             <div>
               <div className="flex justify-between items-center mb-4">
                 <h3 className="text-lg font-semibold text-gray-800">All Users</h3>
                 <div className="bg-red-50 rounded-xl border p-4 mb-4">
                   <div className="max-w-xl mx-auto">
                     <h4 className="text-base font-bold text-red-900 text-center mb-3">
                       Search Users
                     </h4>
                     <div className="relative">
                       <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                         <svg className="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                         </svg>
                       </div>
                       <input
                         type="text"
                         value={searchQuery}
                         onChange={(e) => setSearchQuery(e.target.value)}
                         placeholder="Search users by email, name, or IP..."
                         className="w-full pl-10 pr-10 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 shadow-sm"
                       />
                       {searchQuery && (
                         <button
                           onClick={() => setSearchQuery('')}
                           className="absolute inset-y-0 right-0 pr-3 flex items-center hover:bg-gray-50 rounded-r-lg transition-colors"
                         >
                           <svg className="h-4 w-4 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                           </svg>
                         </button>
                       )}
                     </div>
                     <div className="mt-2 text-center">
                       <p className="text-sm text-red-700">
                         Found <span className="font-medium">{filteredUsers.length}</span> users
                       </p>
                       {searchQuery && (
                         <button
                           onClick={() => setSearchQuery('')}
                           className="mt-1 text-xs text-red-600 hover:text-red-700 font-medium"
                         >
                           Clear search
                         </button>
                       )}
                     </div>
                   </div>
                 </div>
               </div>
               <div className="overflow-x-auto">
                 <table className="min-w-full divide-y divide-gray-200">
                   <thead className="bg-gray-50">
                     <tr>
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                     </tr>
                   </thead>
                   <tbody className="bg-white divide-y divide-gray-200">
                     {filteredUsers.map((userRecord) => (
                       <tr key={userRecord.id} className={userRecord.isBanned ? 'bg-red-50' : ''}>
                         <td className="px-6 py-4 whitespace-nowrap">
                           <div className="flex items-center">
                             <div className="flex-shrink-0 h-8 w-8">
                               {userRecord.photoURL ? (
                                 <img className="h-8 w-8 rounded-full" src={userRecord.photoURL} alt="" />
                               ) : (
                                 <div className="h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center">
                                   <span className="text-gray-600 text-xs font-medium">
                                     {userRecord.displayName.charAt(0).toUpperCase()}
                                   </span>
                                 </div>
                               )}
                             </div>
                             <div className="ml-3">
                               <div className="text-sm font-medium text-gray-900">
                                 {userRecord.displayName}
                                 {userRecord.isAdmin && (
                                   <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                     👑 Admin
                                   </span>
                                 )}
                               </div>
                             </div>
                           </div>
                         </td>
                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                           {userRecord.email}
                         </td>
                         <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                           {userRecord.ipAddress}
                         </td>
                         <td className="px-6 py-4 whitespace-nowrap">
                           {userRecord.isBanned ? (
                             <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                               Banned
                             </span>
                           ) : (
                             <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                               Active
                             </span>
                           )}
                         </td>
                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                           {userRecord.lastLoginAt ? formatDate(userRecord.lastLoginAt) : 'Never'}
                         </td>
                         <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                           {!userRecord.isBanned && userRecord.id !== user?.uid && (
                             <button
                               onClick={() => handleBanUser(userRecord)}
                               className="text-red-600 hover:text-red-900 font-medium"
                             >
                               Ban User
                             </button>
                           )}
                           {userRecord.isBanned && (
                             <span className="text-gray-500">Already Banned</span>
                           )}
                           {userRecord.id === user?.uid && (
                             <span className="text-gray-500">You</span>
                           )}
                         </td>
                       </tr>
                     ))}
                   </tbody>
                 </table>
               </div>
               
               {filteredUsers.length === 0 && (
                 <div className="text-center py-8">
                   <div className="text-gray-500">
                     {searchQuery ? 'No users found matching your search' : 'No users found'}
                   </div>
                 </div>
               )}
             </div>
           )}

          {activeTab === 'manual' && (
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-4">Manual Ban</h3>
              <form onSubmit={handleManualBan} className="space-y-4 max-w-md">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ban Type</label>
                  <select
                    value={manualBanForm.type}
                    onChange={(e) => setManualBanForm(prev => ({ ...prev, type: e.target.value as 'ip' | 'user' }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                  >
                    <option value="ip">IP Address</option>
                    <option value="user">User Email</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {manualBanForm.type === 'ip' ? 'IP Address' : 'User Email'}
                  </label>
                  <input
                    type={manualBanForm.type === 'ip' ? 'text' : 'email'}
                    value={manualBanForm.target}
                    onChange={(e) => setManualBanForm(prev => ({ ...prev, target: e.target.value }))}
                    placeholder={manualBanForm.type === 'ip' ? '192.168.1.1' : 'user@example.com'}
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Reason</label>
                  <textarea
                    value={manualBanForm.reason}
                    onChange={(e) => setManualBanForm(prev => ({ ...prev, reason: e.target.value }))}
                    placeholder="Reason for ban..."
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                    rows={3}
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Duration (hours)</label>
                  <select
                    value={manualBanForm.duration}
                    onChange={(e) => setManualBanForm(prev => ({ ...prev, duration: e.target.value }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                  >
                    <option value="1">1 hour</option>
                    <option value="6">6 hours</option>
                    <option value="24">24 hours</option>
                    <option value="72">3 days</option>
                    <option value="168">1 week</option>
                    <option value="720">30 days</option>
                  </select>
                </div>

                <button
                  type="submit"
                  className="w-full bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition-colors font-medium"
                >
                  Apply Ban
                </button>
              </form>
            </div>
          )}
        </div>

        <div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
          <div className="text-sm text-gray-600">
            <strong>Note:</strong> All ban actions are logged and can be audited. Use this power responsibly.
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminBanModal; 